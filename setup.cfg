[metadata]
name = command-based-framework
description = A scheduler event loop geared towards robotics and declarative programming systems.
author = Julian_Orteil
author_email =
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/Julian_Orteil/command-based-framework
# Add here related links, for example:
project_urls =
    Documentation = https://pyscaffold.org/
#    Source = https://github.com/pyscaffold/pyscaffold/
#    Changelog = https://pyscaffold.org/en/latest/changelog.html
#    Tracker = https://github.com/pyscaffold/pyscaffold/issues
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Download = https://pypi.org/project/PyScaffold/#files
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.7

# Add here dependencies of the project (line-separated).
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
install_requires =
    importlib-metadata; python_version<"3.8"
    typing_extensions; python_version<"3.10"
    gevent[recommended]>=22.10.2  # https://github.com/gevent/gevent


[options.packages.find]
where = src
exclude =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install command-based-framework[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    coverage>=7.0.1
    pytest>=7.2.0  # https://github.com/pytest-dev/pytest
    pytest-sugar>=0.9.6  # https://github.com/Frozenball/pytest-sugar
    setuptools>=46.1.0

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = command_based_framework.module:function
# For example:
# console_scripts =
#     fibonacci = command_based_framework.skeleton:run
# And any other entry points, for example:
# command_based_framework.cli =
#     awesome = command_based_framework.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --strict-markers
    --strict-config
    --tb=short
    --verbose
    --capture=no
    --ignore=.tox
norecursedirs =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
testpaths = tests
xfail_strict = True
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
strictness = long
show-source = True
max-line-length = 100
max-complexity = 6
docstring-style = google
ignore = D100, D104, D401, DAR103, DAR203, E800, N802, Q000, RST303, RST304, W504, WPS326, WPS402, WPS433, WPS436
per-file-ignores =
    # WPS421: Found wrong function call: print
    setup.py: WPS421
    # WPS412: Found `__init__.py` module with login
    # WPS420: Found wrong keywork: del
    # WPS440: Found block variables overlap: PackageNotFoundError, version
    src/command_based_framework/__init__.py: WPS412, WPS420, WPS440
rst-directives =
    # These are sorted alphabetically - but that does not matter
    autosummary,data,currentmodule,deprecated,
    glossary,moduleauthor,plot,testcode,
    versionadded,versionchanged,
rst-roles =
    attr,class,func,meth,mod,obj,ref,term,
    # C programming language:
    c:member,
    # Python programming language:
    py:func,py:mod,

[isort]
include_trailing_comma = True
use_parentheses = True
multi_line_output = 3
line_length = 100
profile = black
known_first_party = command_based_framework

[mypy]
allow_redefinition = False
check_untyped_defs = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True

[coverage:run]
branch = True
source = command_based_framework
concurrency = multiprocessing
parallel = True
omit =
    *.tox*

[coverage:paths]
source =
    */site-packages/

[coverage:html]
show_contexts = True

[coverage:report]
fail_under = 100
show_missing = True
exclude_lines =
    pragma: no cover

    def __repr__
    if self\.debug

    raise AssertionError
    raise NotImplementedError

    if 0:
    if __name__ == .__main__.:
